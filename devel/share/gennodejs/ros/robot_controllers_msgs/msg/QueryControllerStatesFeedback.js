// Auto-generated. Do not edit!

// (in-package robot_controllers_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let ControllerState = require('./ControllerState.js');

//-----------------------------------------------------------

class QueryControllerStatesFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.state_diff = null;
    }
    else {
      if (initObj.hasOwnProperty('state_diff')) {
        this.state_diff = initObj.state_diff
      }
      else {
        this.state_diff = [];
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type QueryControllerStatesFeedback
    // Serialize message field [state_diff]
    // Serialize the length for message field [state_diff]
    bufferOffset = _serializer.uint32(obj.state_diff.length, buffer, bufferOffset);
    obj.state_diff.forEach((val) => {
      bufferOffset = ControllerState.serialize(val, buffer, bufferOffset);
    });
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type QueryControllerStatesFeedback
    let len;
    let data = new QueryControllerStatesFeedback(null);
    // Deserialize message field [state_diff]
    // Deserialize array length for message field [state_diff]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.state_diff = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.state_diff[i] = ControllerState.deserialize(buffer, bufferOffset)
    }
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    object.state_diff.forEach((val) => {
      length += ControllerState.getMessageSize(val);
    });
    return length + 4;
  }

  static datatype() {
    // Returns string type for a message object
    return 'robot_controllers_msgs/QueryControllerStatesFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '884ebbcebb33b2855209539dadfa0dc6';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Action feedback:
    # Status changes in controllers as they are started/stopped
    ControllerState[] state_diff
    
    
    ================================================================================
    MSG: robot_controllers_msgs/ControllerState
    # Valid states:
    
    uint8 STOPPED = 0
    uint8 RUNNING = 1
    uint8 ERROR = 2
    
    string name
    string type
    uint8 state
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new QueryControllerStatesFeedback(null);
    if (msg.state_diff !== undefined) {
      resolved.state_diff = new Array(msg.state_diff.length);
      for (let i = 0; i < resolved.state_diff.length; ++i) {
        resolved.state_diff[i] = ControllerState.Resolve(msg.state_diff[i]);
      }
    }
    else {
      resolved.state_diff = []
    }

    return resolved;
    }
};

module.exports = QueryControllerStatesFeedback;
