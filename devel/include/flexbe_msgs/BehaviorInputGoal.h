// Generated by gencpp from file flexbe_msgs/BehaviorInputGoal.msg
// DO NOT EDIT!


#ifndef FLEXBE_MSGS_MESSAGE_BEHAVIORINPUTGOAL_H
#define FLEXBE_MSGS_MESSAGE_BEHAVIORINPUTGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace flexbe_msgs
{
template <class ContainerAllocator>
struct BehaviorInputGoal_
{
  typedef BehaviorInputGoal_<ContainerAllocator> Type;

  BehaviorInputGoal_()
    : request_type(0)
    , msg()  {
    }
  BehaviorInputGoal_(const ContainerAllocator& _alloc)
    : request_type(0)
    , msg(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _request_type_type;
  _request_type_type request_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  _msg_type msg;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(POINT_LOCATION)
  #undef POINT_LOCATION
#endif
#if defined(_WIN32) && defined(SELECTED_OBJECT_ID)
  #undef SELECTED_OBJECT_ID
#endif
#if defined(_WIN32) && defined(WAYPOINT_GOAL_POSE)
  #undef WAYPOINT_GOAL_POSE
#endif
#if defined(_WIN32) && defined(GHOST_JOINT_STATES)
  #undef GHOST_JOINT_STATES
#endif
#if defined(_WIN32) && defined(FOOTSTEP_PLAN_HEADER)
  #undef FOOTSTEP_PLAN_HEADER
#endif

  enum {
    POINT_LOCATION = 0u,
    SELECTED_OBJECT_ID = 1u,
    WAYPOINT_GOAL_POSE = 2u,
    GHOST_JOINT_STATES = 3u,
    FOOTSTEP_PLAN_HEADER = 4u,
  };


  typedef boost::shared_ptr< ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator> const> ConstPtr;

}; // struct BehaviorInputGoal_

typedef ::flexbe_msgs::BehaviorInputGoal_<std::allocator<void> > BehaviorInputGoal;

typedef boost::shared_ptr< ::flexbe_msgs::BehaviorInputGoal > BehaviorInputGoalPtr;
typedef boost::shared_ptr< ::flexbe_msgs::BehaviorInputGoal const> BehaviorInputGoalConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator1> & lhs, const ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator2> & rhs)
{
  return lhs.request_type == rhs.request_type &&
    lhs.msg == rhs.msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator1> & lhs, const ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flexbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ce7fc3e0d93d66895817ecbe9d411f6";
  }

  static const char* value(const ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ce7fc3e0d93d668ULL;
  static const uint64_t static_value2 = 0x95817ecbe9d411f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flexbe_msgs/BehaviorInputGoal";
  }

  static const char* value(const ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Available request types\n"
"\n"
"uint8 POINT_LOCATION 	    = 0\n"
"uint8 SELECTED_OBJECT_ID    = 1\n"
"uint8 WAYPOINT_GOAL_POSE    = 2\n"
"uint8 GHOST_JOINT_STATES    = 3\n"
"uint8 FOOTSTEP_PLAN_HEADER  = 4\n"
"\n"
"\n"
"# Choose one of the available request types above\n"
"uint8 request_type\n"
"\n"
"# Request message displayed to the operator\n"
"# Provide context information, i.e. for which purpose the data is required.\n"
"# The operator will be told which type of data to provide indepently from this message.\n"
"string msg\n"
"\n"
;
  }

  static const char* value(const ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.request_type);
      stream.next(m.msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BehaviorInputGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flexbe_msgs::BehaviorInputGoal_<ContainerAllocator>& v)
  {
    s << indent << "request_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.request_type);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLEXBE_MSGS_MESSAGE_BEHAVIORINPUTGOAL_H
